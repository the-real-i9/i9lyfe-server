FORMAT: 1A

# Design Documentation: i9lyfe server

A social media application sever with a wide range of social media interactions.

# Group Auth

## New account [/api/auth/signup/request_new_account]

### Request new account [POST]

This endpoint allows you to initiate the signup process by first submitting a valid email address.

+ email (string) - A valid email address not already in use.

+ Request (application/json)
    
            {
                "email": "example@gmail.com"
            }

+ Response 200 (application/json)

    This `Set-cookie` header is attached to maintain an ongoing signup session between independent requests. It will be attached to subsequent request/response till the signup process is done.

    + Headers

            Set-cookie: connect.sid={encoded_session_id};

    + Body

            {
                "msg": "Enter the 6-digit code sent to {yourEmail}"
            }

+ Response 400 (application/json)

            {
                "reason": "An account already exists with this email!"
            }

## Email verification [/api/auth/signup/verify_email]

### Verify your email [POST]

This endpoint is strictly the second step of the signup process, requiring you to enter the 6-digit code sent to the email address provided in the previous step. Any attempt to access it out of order will result in an error.

+ code (number) - 6-digit code

+ Request (application/json)

    + Headers

            Cookie: connect.sid={encoded_session_id}
    
    + Body

            {
                "code": "123456"
            }

+ Response 200 (application/json)

    + Headers

            Set-cookie: connect.sid={encoded_session_id};

    + Body

            {
                "msg": "Your email has been verified!"
            }

+ Response 400 (application/json)

    + Headers

            Set-cookie: connect.sid={encoded_session_id};

    + Body

            {
                "reason": "Incorrect/Expired verification code. Re-check your mail or Re-submit email."
            }

## User registration [/api/auth/signup/register_user]

### Register user [POST]

The last step of the signup process, requiring you to provide your account information

+ **username** (string, required) - Username must be unique. Minimum of 3-digits.
+ **password** (string, required) - A strong password. Minimum of 8-digts.
+ **name** (string, required) - Display name
+ **birthday** (datestring, required) - Date of birth
+ **bio** (string, optional)

+ Request (application/json)

    + Headers

            Cookie: connect.sid={encoded_session_id}
    
    + Body

            {
                "username": "mckenney",
                "password": "xxxxxxxx",
                "name": "Kehinde Ogunrinola",
                "birthday": "2000-11-07",
                "bio": "Something about you...",
            }

+ Response 201 (application/json)

            {
                "msg": "Signup success. You're automatically logged in.",
                "jwtToken": "${JWT_TOKEN}",
                "user": {
                    "username": "mckenney",
                }
            }

## Signin [/api/auth/signin]

### Signin [POST]

+ username (string, required)
+ password (string, required)

+ Request (application/json)

    + Body

            {
                "username": "mckenney",
                "password": "xxxxxxxx"
            }

+ Response 422 (application/json)

            {
                "reason": "Incorrect email or password"
            }

+ Response 200 (application/json)

            {
                "msg": "Signin success!",
                "userData": {
                    "id": 1,
                    "username": "mckenney"
                },
                "jwtToken": "${AUTH_JWT_TOKEN}"
            }


# Group User {protected}

## Getsession user [/api/user_private/session_user]

### Session user [GET]

+ Request (application/json)

    + Headers

            Authorization: Bearer f23rwfwfff...

+ Response 200 (application/json)

            {
                "sessionUser": {
                    "key": "value"
                }
            }


## Follow user [/api/user_private/users/{userId}/follow]

+ Parameters
    + userId: `1` (number) - User's unique id

### Follow user [POST]

+ Request

    + Headers

            Authorization: Bearer f23rwfwfff...

+ Response 200

## Unfollow user [/api/user_private/users/{userId}/unfollow]

+ Parameters
    + userId: `1` (number) - User's unique id

### Unfollow user [DELETE]

+ Request

    + Headers

            Authorization: Bearer f23rwfwfff...

+ Response 200


## Edit your profile [/api/user_private/edit_my_profile]

### My profile [PATCH]

+ field (any, required) - The name of the field you wish to edit, with its new data

+ Request (application/json)
    + Headers

            Authorization: Bearer f23rwfwfff...

    + Body

            {
                "field": "new data"
            }

+ Response 200


## Update connection status [/api/user_private/update_my_connection_status]

### Connection status [PATCH]

+ connection_status (string, required) - Value is either "online" or "offline".
+ last_active (Date) - The `connection_status` is "offline", then `last_active` is set, else it is unspecified or nulled.

+ Request (application/json)
    + Headers

            Authorization: Bearer f23rwfwfff...

    + Body

            {
                "connection_status": "offline",
                "last_active": "${offline time}"
            }

+ Response 200


## Get home feed posts [/api/user_private/home_feed?limit={limit}&offset={offset}]

+ Parameters
    + limit: `20` (number) - A maximum of 50 post cards per page
    + offset: `0` (number) - `n * limit`, where `n` starts from zero, to navigate to pages ahead.

### Home feed [GET]

+ Request (application/json)

    + Headers

            Authorization: Bearer f23rwfwfff...

+ Response 200 (application/json)

    The response body is a collection of post data.

    + Body

            [
                {
                    "key1": "value1",
                    "key2": "value2"
                },
                {
                    "key1": "value1",
                    "key2": "value2"
                }
            ]



## Get posts mentioning client [/api/user_private/mentioned_posts?limit={limit}&offset={offset}]

+ Parameters
    + limit: `20` (number) - A maximum of 50 post cards per page
    + offset: `0` (number) - `n * limit`, where `n` starts from zero, to navigate to pages ahead.

### Posts mentioning client [GET]

+ Request (application/json)

    + Headers

            Authorization: Bearer f23rwfwfff...

+ Response 200 (application/json)

    The response body is a collection of post data.

    + Body

            [
                {
                    "post_id": "idValue",
                    "key2": "value2"
                },
                {
                    "post_id": "idValue",
                    "key2": "value2"
                }
            ]


## Get posts client reacted to [/api/user_private/reacted_posts?limit={limit}&offset={offset}]

+ Parameters
    + limit: `20` (number) - A maximum of 50 post cards per page
    + offset: `0` (number) - `n * limit`, where `n` starts from zero, to navigate to pages ahead.

### Posts client reacted to [GET]

+ Request (application/json)

    + Headers

            Authorization: Bearer f23rwfwfff...

+ Response 200 (application/json)

    The response body is a collection of post data.

    + Body

            [
                {
                    "post_id": "idValue",
                    "key2": "value2"
                },
                {
                    "post_id": "idValue",
                    "key2": "value2"
                }
            ]



## Get posts saved by client [/api/user_private/saved_posts?limit={limit}&offset={offset}]

+ Parameters
    + limit: `20` (number) - A maximum of 50 post cards per page
    + offset: `0` (number) - `n * limit`, where `n` starts from zero, to navigate to pages ahead.

### Saved posts [GET]

+ Request (application/json)

    + Headers

            Authorization: Bearer f23rwfwfff...

+ Response 200 (application/json)

    The response body is a collection of post data.

    + Body

            [
                {
                    "post_id": "idValue",
                    "key2": "value2"
                },
                {
                    "post_id": "idValue",
                    "key2": "value2"
                }
            ]

## Get client notifications [/api/user_private/my_notifications?from={fromDate}&limit={limit}&offset={offset}]

+ Parameters
    + fromDate: `2024-05-01` (string) - Specify the date constraint of notifications to be retrieved.
    + limit: `20` (number) - A maximum of 50 post cards per page
    + offset: `0` (number) - `n * limit`, where `n` starts from zero, to navigate to pages ahead.

### My notifications [GET]

+ Request (application/json)

    + Headers

            Authorization: Bearer f23rwfwfff...

+ Response 200 (application/json)

    The response body is a collection of noification data.

    + Body

            [
                {
                    "notif_id": "idValue",
                    "read": true,
                    "key3": "value4"
                },
                {
                    "notif_id": "idValue",
                    "read": false,
                    "key3": "value3"
                }
            ]

# Group User {public}

## Get user profile [/api/user_public/{username}]

+ Parameters
    + username (string) - User's username for which to retrieve profile information

### User profile [GET]

+ Request (application/json)

    In user public routes the `Authorization` request header is not mandatory.

    + Headers

            Authorization: Bearer f23rwfwfff...

+ Response 200 (application/json)

    The response body contains the user's profile information, as specified by their username.

    + Body

            {
                "username": "mckenney",
                "age": 21,
                "profile_pic_url": "https://img.jpg",
                "key4": "value4"
            }


## Get user followers [/api/user_public/{username}/followers]

+ Parameters
    + username (string) - User's username for which to retrieve its followers

### User followers [GET]

+ Request (application/json)

    In user public routes the `Authorization` request header is not mandatory.

    + Headers

            Authorization: Bearer f23rwfwfff...

+ Response 200 (application/json)

    The response body contains a collection of followers' user data belonging to the specifiy user.

    + Body

            [
                {
                    "username": "dodo",
                    "profile_pic_url": "https://img.jpg",
                    "client_follows": true,
                },
                {
                    "username": "taiwo",
                    "profile_pic_url": "https://img.jpg",
                    "client_follows": false,
                }
            ]


## Get user following [/api/user_public/{username}/following]

+ Parameters
    + username (string) - User's username for which to retrieve the users they follow

### User following [GET]

+ Request (application/json)

    In user public routes the `Authorization` request header is not mandatory.

    + Headers

            Authorization: Bearer f23rwfwfff...

+ Response 200 (application/json)

    The response body contains a collection of user data followed by the specified username.

    + Body

            [
                {
                    "username": "dodo",
                    "profile_pic_url": "https://img.jpg",
                    "client_follows": true,
                },
                {
                    "username": "taiwo",
                    "profile_pic_url": "https://img.jpg",
                    "client_follows": true,
                }
            ]
            

## Get user posts [/api/user_public/{username}/posts?limit={limit}&offset={offset}]

+ Parameters
    + username (string) - User's username for which to retrieve their posts
    + limit: `20` (number) - A maximum of 50 post cards per page
    + offset: `0` (number) - `n * limit`, where `n` starts from zero, to navigate to pages ahead.

### User posts [GET]

+ Request (application/json)

    In user public routes the `Authorization` request header is not mandatory.

    + Headers

            Authorization: Bearer f23rwfwfff...

+ Response 200 (application/json)

    The response body is a collection of post data belonging to the specified username.

    + Body

            [
                {
                    "post_id": "idValue",
                    "key2": "value2"
                },
                {
                    "post_id": "idValue",
                    "key2": "value2"
                }
            ]