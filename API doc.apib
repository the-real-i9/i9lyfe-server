FORMAT: 1A

# Design Documentation: i9lyfe server

A social media application sever with a wide range of social media interactions.

# Group Auth

## Signup: Request New Account [/api/public/signup/request_new_account]

### Request New Account [POST]

This endpoint allows you to initiate the signup process by first submitting a valid email address.

+ email (string) - A valid email address not already in use.

+ Request (application/json)
    
            {
                "email": "example@gmail.com"
            }

+ Response 200 (application/json)

    This `Set-cookie` header is attached to maintain an ongoing signup session between independent requests. It will be attached to subsequent requests/responses in the signup proecess till signup is done.

    + Headers

            Set-cookie: connect.sid={encoded_session_id};

    + Body

            {
                "msg": "Enter the 6-digit code sent to ${email} to verify your email"
            }

+ Response 400 (application/json)

            {
               "msg": "A user with this email already exists."
            }

## Signup: Verify Email [/api/public/signup/verify_email]

### Verify Email [POST]

This endpoint is strictly the second step of the signup process, requiring you to enter the 6-digit code sent to the email address provided in the previous step. Any attempt to access it out of order will result in an error.

+ code (number) - 6-digit code

+ Request (application/json)

    + Headers

            Cookie: connect.sid={encoded_session_id}
    
    + Body

            {
                "code": "123456"
            }

+ Response 200 (application/json)

    + Headers

            Set-cookie: connect.sid={encoded_session_id};

    + Body

            {
                "msg": "Your email ${email} has been verified!"
            }

+ Response 400 (application/json)

    Error message can come in two forms

    + Headers

            Set-cookie: connect.sid={encoded_session_id};

    + Body

            {
                "msg": "Incorrect verification code! Check or Re-submit your email."
            }

            {
                "msg": "Verification code expired! Re-submit your email."
            }

## Signup: Register User [/api/public/signup/register_user]

### Register User [POST]

The last step of the signup process, requiring you to provide your profile information

+ **username** (string, required) - Username must be unique. Minimum of 3-digits.
+ **password** (string, required) - A strong password. Minimum of 8-digts.
+ **name** (string, required) - Display name
+ **birthday** (datestring, required) - Date of birth. Can be any vald datestring format.
+ **bio** (string, optional)

+ Request (application/json)

    + Headers

            Cookie: connect.sid={encoded_session_id}
    
    + Body

            {
                "username": "mckenney",
                "password": "xxxxxxxx",
                "name": "Kehinde Ogunrinola",
                "birthday": "2000-11-07",
                "bio": "Something about you...",
            }

+ Response 201 (application/json)

            {
                "msg": "Signup success! You're automatically logged in.",
                "user": {
                    "id": 3
                    "username": "mckenney",
                    ...
                },
                "jwt": "${JWT_TOKEN}"
            }

+ Response 400 (application/json)

    + Headers

            Set-cookie: connect.sid={encoded_session_id};

    + Body

            {
                "msg": "Username already taken. Try another."
            }

## Signin [/api/public/signin]

### Signin [POST]

+ email_or_username (string, required)
+ password (string, required)

+ Request (application/json)

    + Body

            {
                "email_or_username": "mckenney",
                "password": "xxxxxxxx"
            }

+ Response 200 (application/json)

            {
                "msg": "Signin success!",
                "jwt": "${AUTH_JWT_TOKEN}"
                "user": {
                    "id": 3,
                    "username": "mckenney"
                    ...
                },
            }

+ Response 400 (application/json)

            {
                "msg": "Incorrect email or password"
            }

# Group User {private}

## Client User [/api/private/session_user]

### Get Session User [GET]

+ Request (application/json)

    + Headers

            Authorization: Bearer f23rwfwfff...

+ Response 200 (application/json)

            {
                "sessionUser": {
                    "key": "value"
                }
            }


## Follow User [/api/private/users/{user_id}/follow]

+ Parameters
    + user_id: `1` (number) - User's unique id

### Follow User [POST]

+ Request

    + Headers

            Authorization: Bearer f23rwfwfff...

+ Response 200 (application/json)

            {
                "msg": "operation successful"
            }


## Unfollow User [/api/private/users/{user_id}/unfollow]

+ Parameters
    + user_id: `1` (number) - User's unique id

### Unfollow User [DELETE]

+ Request

    + Headers

            Authorization: Bearer f23rwfwfff...

+ Response 200 (application/json)

            {
                "msg": "operation successful"
            }


## Edit Profile [/api/private/edit_profile]

### Edit Profile [PATCH]

+ field (any, required) - The name of the field you wish to change, with its new data. Allowed fields are `name`, `birthday`, and `bio`

+ Request (application/json)
    + Headers

            Authorization: Bearer f23rwfwfff...

    + Body

            {
                "field": "new data"
            }

+ Response 200 (application/json)

            {
                "msg": "operation successful"
            }


## Update Connection Status [/api/private/update_connection_status]

### Update Connection Status [PATCH]

+ connection_status (string, required) - Value is either "online" or "offline".
+ last_active (datestring) - If `connection_status` is "offline", then `last_active` is required, else, must be `null`.

+ Request (application/json)
    + Headers

            Authorization: Bearer f23rwfwfff...

    + Body

            {
                "connection_status": "offline",
                "last_active": "${offline time}"
            }

+ Response 200 (application/json)

            {
                "msg": "operation successful"
            }


## Home Feed [/api/private/home_feed?limit={limit}&offset={offset}]

+ Parameters
    + limit: `20` (number) - A maximum of 20 posts per batch
    + offset: `0` (number) - `n * limit`, where `n` starts from zero, to scroll-request the next batch of data.

### Get Home Feed [GET]

+ Request (application/json)

    + Headers

            Authorization: Bearer f23rwfwfff...

+ Response 200 (application/json)

    The response body is a collection of post data.

    + Body

            [
                {
                    "key1": "value1",
                    "key2": "value2"
                },
                {
                    "key1": "value1",
                    "key2": "value2"
                }
            ]



## Posts mentioning client [/api/private/mentioned_posts?limit={limit}&offset={offset}]

+ Parameters
    + limit: `20` (number) - A maximum of 20 posts per batch
    + offset: `0` (number) - `n * limit`, where `n` starts from zero, to scroll-request the next batch of data.

### Get posts mentioning client [GET]

+ Request (application/json)

    + Headers

            Authorization: Bearer f23rwfwfff...

+ Response 200 (application/json)

    The response body is a collection of post data.

    + Body

            [
                {
                    "post_id": "idValue",
                    "key2": "value2"
                },
                {
                    "post_id": "idValue",
                    "key2": "value2"
                }
            ]


## Posts client reacted to [/api/private/reacted_posts?limit={limit}&offset={offset}]

+ Parameters
    + limit: `20` (number) - A maximum of 20 posts per batch
    + offset: `0` (number) - `n * limit`, where `n` starts from zero, to scroll-request the next batch of data.

### Get posts client reacted to [GET]

+ Request (application/json)

    + Headers

            Authorization: Bearer f23rwfwfff...

+ Response 200 (application/json)

    The response body is a collection of post data.

    + Body

            [
                {
                    "post_id": "idValue",
                    "key2": "value2"
                },
                {
                    "post_id": "idValue",
                    "key2": "value2"
                }
            ]



## Posts client saved [/api/private/saved_posts?limit={limit}&offset={offset}]

+ Parameters
    + limit: `20` (number) - A maximum of 20 posts per batch
    + offset: `0` (number) - `n * limit`, where `n` starts from zero, to scroll-request the next batch of data.

### Get saved posts [GET]

+ Request (application/json)

    + Headers

            Authorization: Bearer f23rwfwfff...

+ Response 200 (application/json)

    The response body is a collection of post data.

    + Body

            [
                {
                    "post_id": "idValue",
                    "key2": "value2"
                },
                {
                    "post_id": "idValue",
                    "key2": "value2"
                }
            ]

## Client notifications [/api/private/my_notifications?from={fromDate}&limit={limit}&offset={offset}]

+ Parameters
    + fromDate: `2024-05-01` (datestring) - Specify the date constraint of notifications to be retrieved.
    + limit: `20` (number) - A maximum of 20 notifications per batch
    + offset: `0` (number) - `n * limit`, where `n` starts from zero, to scroll-request the next batch of data.

### Get my notifications [GET]

+ Request (application/json)

    + Headers

            Authorization: Bearer f23rwfwfff...

+ Response 200 (application/json)

    The response body is a collection of noification data.

    + Body

            [
                {
                    "notif_id": "idValue",
                    "read": true,
                    "key3": "value4"
                },
                {
                    "notif_id": "idValue",
                    "read": false,
                    "key3": "value3"
                }
            ]

# Group User {public}

## User profile [/api/user_public/{username}]

+ Parameters
    + username (string) - User's username for which to retrieve profile information

### Get user profile [GET]

+ Request

    In user public routes the `Authorization` request header is not mandatory.

    + Headers

            Authorization: Bearer f23rwfwfff...

+ Response 200 (application/json)

    The response body contains the user's profile information, as specified by their username.

    + Body

            {
                "username": "mckenney",
                "age": 21,
                "profile_pic_url": "https://img.jpg",
                "key4": "value4"
            }


## User's followers [/api/user_public/{username}/followers]

+ Parameters
    + username (string) - User's username for which to retrieve its followers

### Get user's followers [GET]

+ Request

    In user public routes the `Authorization` request header is not mandatory.

    + Headers

            Authorization: Bearer f23rwfwfff...

+ Response 200 (application/json)

    The response body contains a collection of followers' user data belonging to the specifiy user.

    + Body

            [
                {
                    "username": "dodo",
                    "profile_pic_url": "https://img.jpg",
                    "client_follows": true,
                },
                {
                    "username": "taiwo",
                    "profile_pic_url": "https://img.jpg",
                    "client_follows": false,
                }
            ]


## User's following [/api/user_public/{username}/following]

+ Parameters
    + username (string) - User's username for which to retrieve the users they follow

### Get user's following [GET]

+ Request

    In user public routes the `Authorization` request header is not mandatory.

    + Headers

            Authorization: Bearer f23rwfwfff...

+ Response 200 (application/json)

    The response body contains a collection of user data followed by the specified username.

    + Body

            [
                {
                    "username": "dodo",
                    "profile_pic_url": "https://img.jpg",
                    "client_follows": true,
                },
                {
                    "username": "taiwo",
                    "profile_pic_url": "https://img.jpg",
                    "client_follows": true,
                }
            ]
            

## User's posts [/api/user_public/{username}/posts?limit={limit}&offset={offset}]

+ Parameters
    + username (string) - User's username for which to retrieve their posts
    + limit: `20` (number) - A maximum of 20 posts per batch
    + offset: `0` (number) - `n * limit`, where `n` starts from zero, to scroll-request the next batch of data.

### Get user's posts [GET]

+ Request

    In user public routes the `Authorization` request header is not mandatory.

    + Headers

            Authorization: Bearer f23rwfwfff...

+ Response 200 (application/json)

    The response body is a collection of post data belonging to the specified username.

    + Body

            [
                {
                    "post_id": "idValue",
                    "key2": "value2"
                },
                {
                    "post_id": "idValue",
                    "key2": "value2"
                }
            ]


# Group App

## Explore posts [/api/app/explore?limit={limit}&offset={offset}]

+ Parameters
    + limit: `20` (number) - A maximum of 20 posts per batch
    + offset: `0` (number) - `n * limit`, where `n` starts from zero, to scroll-request the next batch of data.

### Get explore posts [GET]

+ Request

    `Authorization` request header is not mandatory as this route is public.

    + Headers

            Authorization: Bearer f23rwfwfff...

+ Response 200 (application/json)

    The response body is a collection of post data as aggreegated by the app's algorithm.

    + Body

            [
                {
                    "post_id": "idValue",
                    "key2": "value2"
                },
                {
                    "post_id": "idValue",
                    "key2": "value2"
                }
            ]


## App contents [/api/app/search?search={search}&filter={filter}&limit={limit}&offset={offset}]

+ Parameters
    + search (string) - The text you want to search for within `filter`. A filter of `user` allows you to search users by username, `hashtag` allows you to search hashtags by name, while specifying one of post types or leaving the `filter` unspecified searches through the post description lexically.
    + filter (string) - Possible values are, `user`, `hashtag`, and one of the set of post types, `photo, video, reel, strory`. If unspecified, it filters by all post types, as long as `search` text is contained lexically in the post's description.
    + limit: `20` (number) - A maximum of 20 data items per batch
    + offset: `0` (number) - `n * limit`, where `n` starts from zero, to scroll-request the next batch of data.

### Search and Filter [GET]

+ Request

    `Authorization` request header is not mandatory as this route is public.

    + Headers

            Authorization: Bearer f23rwfwfff...

+ Response 200 (application/json)

    The response body is a collection of data as specified by `filter`.

    + Body

            [
                {
                    "id": "idValue",
                    "key2": "value2"
                },
                {
                    "id": "idValue",
                    "key2": "value2"
                }
            ]


## Hashtagged posts [/api/app/hashtags/{hashtagName}?limit={limit}&offset={offset}]

+ Parameters
    + hashtagName (string) - Name of the hashtag for which to retrieve posts.
    + limit: `20` (number) - A maximum of 20 posts per batch
    + offset: `0` (number) - `n * limit`, where `n` starts from zero, to scroll-request the next batch of data.

### Get posts with {hashtagName} [GET]

+ Request

    `Authorization` request header is not mandatory as this route is public.

    + Headers

            Authorization: Bearer f23rwfwfff...

+ Response 200 (application/json)

    The response body is a collection of post data including the specified hashtag.

    + Body

            [
                {
                    "post_id": "idValue",
                    "key2": "value2"
                },
                {
                    "post_id": "idValue",
                    "key2": "value2"
                }
            ]



# Group Post

## New post [/api/post_comment/new_post]

### Create new post [POST]

+ **media_binaries** (uint8[][]) - An array of media datas in `uint8` array format. They will be uploaded cloud storage and returned as `media_urls` when requested.
+ **type** (string) - The type of post. Possible values are `photo`, `video`, `story`, or `reel`.
+ **description** (string) - The description supporting the post.

+ Request (application/json)

    + Headers

            Authorization: Bearer f23rwfwfff...

    + Body

            {
                "media_binaries": [],
                "type": "video",
                "description": "This is a post mentioning @dollyp and hashtaging #genius."
            }

+ Response 201 (application/json)

    The response body contains the full details needed to render a post card UI.

    + Body
    
            {
                "post_id": 1,
                "type": "video",
                "description": "This is a post mentioning @dollyp and hashtaging #genius.",
                "key4": "value4"
            }


## Post [/api/post_comment/posts/{postId}]

+ Parameters
    + postId: `4` (number) - Unique id of post.

### Get post detail [GET]

Get post with `postId` of `4`

+ Request

    + Headers

            Authorization: Bearer f23rwfwfff...

+ Response 200 (application/json)

    The response body contains the full details needed to render a post detail UI.

    + Body
    
            {
                "post_id": 1,
                "type": "video",
                "description": "This is a post mentioning @dollyp and hashtaging #genius.",
                "key4": "value4"
            }

### Delete post [DELETE]

Delete post with `postId` of `4`

+ Request

    + Headers

            Authorization: Bearer f23rwfwfff...

+ Response 200


## Post [/api/post_comment/users/{user_id}/posts/{postId}/react]

+ Parameters
    + user_id: `1` (number) - Unique id of post owner.
    + postId: `4` (number) - Unique id of post to react to.

### React to post [POST]

React to post `4` belonging to user `1`

+ Request (application/json)

    + Headers

            Authorization: Bearer f23rwfwfff...

    + Body
    
            {
                "reaction": 🤣,
            }

+ Response 200


## Post reactors [/api/post_comment/posts/{postId}/reactors?limit={limit}&offset={offset}]

+ Parameters
    + postId: `4` (number) - Unique id of post reacted to.
    + limit: `20` (number) - A maximum of 20 data items per batch
    + offset: `0` (number) - `n * limit`, where `n` starts from zero, to scroll-request the next batch of data.

### Get post reactors [GET]

Get reactors to post with `postId` of `4`

+ Request (application/json)

    + Headers

            Authorization: Bearer f23rwfwfff...

+ Response 200 (application/json)

    + Body
    
            [
                {
                    "user_id": 4,
                    "username": "samuel",
                    "reaction_code_point": 323234
                }
            ]


## Reactors of {reaction} to post [/api/post_comment/posts/{postId}/reactors/{reaction}?limit={limit}&offset={offset}]

+ Parameters
    + postId: `4` (number) - Unique id of post to reacted to.
    + reaction: `🤣` (string) - The particular reaction of interest.
    + limit: `20` (number) - A maximum of 20 data items per batch
    + offset: `0` (number) - `n * limit`, where `n` starts from zero, to scroll-request the next batch of data.

### Get reactors of {reaction} to post [GET]

Get reactors of 🤣 to post with `postId` of `4`

+ Request (application/json)

    + Headers

            Authorization: Bearer f23rwfwfff...

+ Response 200 (application/json)

    + Body
    
            [
                {
                    "user_id": 4,
                    "username": "samuel",
                    "reaction_code_point": 323234
                }
            ]


## Post reaction [/api/post_comment/posts/{postId}/remove_reaction]

+ Parameters
    + postId: `4` (number) - Unique id of post reacted to.

### Remove post reaction [DELETE]

Remove my reaction on post with `postId` of `4`

+ Request (application/json)

    + Headers

            Authorization: Bearer f23rwfwfff...

+ Response 200


## New comment on post [/api/post_comment/users{user_id}/posts/{postId}/comment]

+ Parameters
    + user_id: `1` (number) - Unique id of post owner.
    + postId: `4` (number) - Unique id of post to comment on.

### Write comment on post [POST]

+ **attachment_binary** (uint8[]) - Attachment data in `uint8` array binary format.
+ comment_text (string)

+ Request (application/json)

    + Headers

            Authorization: Bearer f23rwfwfff...

    + Body

            {
                "attachment_binary": [],
                "comment_text": "This is another comment on this post."
            }

+ Response 201 (application/json)

    + Body
    
            {
                "comment_id": 1,
                "comment_text": "This is another comment on this post."
                "attachment_url": "https://att.jpg"
            }


## Comments on post [/api/post_comment/posts/{postId}/comments?limit={limit}&offset={offset}]

+ Parameters
    + postId: `4` (number) - Unique id of post for which to retrieve comments.
    + limit: `20` (number) - A maximum of 20 comment cards per batch
    + offset: `0` (number) - `n * limit`, where `n` starts from zero, to scroll request subsequent batches of comments.

### Get comments on post [GET]

+ Request

    + Headers

            Authorization: Bearer f23rwfwfff...

+ Response 200 (application/json)

    + Body
    
            [
                {
                    "comment_id": 1,
                    "comment_text": "This is another comment on this post."
                    "attachment_url": "https://att.jpg"
                },
                {
                    "comment_id": 2,
                    "comment_text": "This is another comment on this post."
                    "attachment_url": "https://att.jpg"
                }
            ]


## Comment on post [/api/post_comment/posts/{targetPostId}/comments/{commentId}]

+ Parameters
    + targetPostId: `4` (number) - Unique id of target post.
    + commentId: `4` (number) - Unique id of comment to be deleted.

### Delete comment on post [DELETE]

+ Request

    + Headers

            Authorization: Bearer f23rwfwfff...

+ Response 200


## Post [/api/post_comment/posts/{postId}/repost]

+ Parameters
    + postId: `4` (number) - Unique id of post to repost.

### Repost post [POST]

+ Request

    + Headers

            Authorization: Bearer f23rwfwfff...

+ Response 200


## Post [/api/post_comment/posts/{postId}/unrepost]

+ Parameters
    + postId: `4` (number) - Unique id of post to unrepost.

### Unrepost post [DELETE]

+ Request

    + Headers

            Authorization: Bearer f23rwfwfff...

+ Response 200


## Post [/api/post_comment/posts/{postId}/save]

+ Parameters
    + postId: `4` (number) - Unique id of post to save.

### Save post [POST]

+ Request

    + Headers

            Authorization: Bearer f23rwfwfff...

+ Response 200


## Post [/api/post_comment/posts/{postId}/unsave]

+ Parameters
    + postId: `4` (number) - Unique id of post to unsave.

### Unsave post [DELETE]

+ Request 

    + Headers

            Authorization: Bearer f23rwfwfff...

+ Response 200


# Group Comment

## New comment on comment [/api/post_comment/users/{user_id}/comment/{commentId}/comment]

**Note:** There isn't a notion of *"reply"* in the API. The notion of *"reply"* introduces confusion in the API design, database design, precisely. Therefore, it is treated as a "comment on comment" throughout the API.

+ Parameters
    + user_id: `1` (number) - Unique id of post owner.
    + commentId: `4` (number) - Unique id of comment to comment on (i.e. "reply to", in a non-technical speak).

### Write comment on comment [POST]

+ **attachment_binary** (uint8[], optional) - Attachment data in `uint8` array binary format. This field isn't required, it is just an option to enable the use GIFs by users.
+ comment_text (string)

+ Request (application/json)

    + Headers

            Authorization: Bearer f23rwfwfff...

    + Body

            {
                "attachment_binary": [],
                "comment_text": "This is another comment on this post."
            }

+ Response 201 (application/json)

    + Body
    
            {
                "comment_id": 1,
                "comment_text": "This is another comment on this post."
                "attachment_url": "https://att.jpg"
            }


## Comments on comment [/api/post_comment/comments/{commentId}/comments?limit={limit}&offset={offset}]

+ Parameters
    + commentId: `4` (number) - Unique id of comment for which to retrieve comments (i.e. replies).
    + limit: `20` (number) - A maximum of 20 comment cards per batch
    + offset: `0` (number) - `n * limit`, where `n` starts from zero, to scroll request subsequent batches of comments.

### Get comments on comment [GET]

+ Request

    + Headers

            Authorization: Bearer f23rwfwfff...

+ Response 200 (application/json)

    + Body
    
            [
                {
                    "comment_id": 1,
                    "comment_text": "This is another comment on this post."
                    "attachment_url": "https://att.jpg"
                },
                {
                    "comment_id": 2,
                    "comment_text": "This is another comment on this post."
                    "attachment_url": "https://att.jpg"
                }
            ]


## Comment [/api/post_comment/comments/{commentId}]

+ Parameters
    + commentId: `4` (number) - Unique id of comment.

### Get comment detail [GET]

+ Request

    + Headers

            Authorization: Bearer f23rwfwfff...

+ Response 200 (application/json)

    + Body
    
            {
                "comment_id": 4,
                "comment_text": "This is another comment on this post."
                "attachment_url": "https://att.jpg"
            }


## Comment on comment [/api/post_comment/comments/{parentCommentId}/comments/{commentId}]

+ Parameters
    + parentCommentId: `4` (number) - Unique id of parent comment.
    + commentId: `4` (number) - Unique id of comment to be deleted.

### Remove comment on comment [DELETE]

+ Request

    + Headers

            Authorization: Bearer f23rwfwfff...

+ Response 200



## Comment reaction [/api/post_comment/users/{user_id}/comments/{commentId}/react]

+ Parameters
    + user_id: `1` (number) - Unique id of comment owner.
    + commentId: `4` (number) - Unique id of comment to react to.

### React to comment [POST]

React to comment `4` belonging to user `1`

+ Request (application/json)

    + Headers

            Authorization: Bearer f23rwfwfff...

    + Body
    
            {
                "reaction": "🎯",
            }

+ Response 200


## Comment reactors [/api/post_comment/comments/{commentId}/reactors?limit={limit}&offset={offset}]

+ Parameters
    + commentId: `4` (number) - Unique id of comment reacted to.
    + limit: `20` (number) - A maximum of 20 comment cards per batch
    + offset: `0` (number) - `n * limit`, where `n` starts from zero, to scroll-request the next batch of data.

### Get comment reactors [GET]

Get reactors to comment with `commentId` of `4`

+ Request

    + Headers

            Authorization: Bearer f23rwfwfff...

+ Response 200 (application/json)

    + Body
    
            [
                {
                    "user_id": 4,
                    "username": "samuel",
                    "reaction_code_point": 323234
                }
            ]


## Reactors of {reaction} to comment [/api/post_comment/comments/{commentId}/reactors/{reaction}?limit={limit}&offset={offset}]

+ Parameters
    + commentId: `4` (number) - Unique id of post comment reacted to.
    + reaction: `🤣` (string) - The particular reaction of interest.
    + limit: `20` (number) - A maximum of 20 comments per batch
    + offset: `0` (number) - `n * limit`, where `n` starts from zero, to scroll-request the next batch of data.

### Get reactors of {reaction} to comment [GET]

Get reactors of 🤣 to comment with `commentId` of `4`

+ Request

    + Headers

            Authorization: Bearer f23rwfwfff...

+ Response 200 (application/json)

    + Body
    
            [
                {
                    "user_id": 4,
                    "username": "samuel",
                    "reaction_code_point": 323234
                }
            ]


## Comment reaction [/api/post_comment/comments/{commentId}/remove_reaction]

+ Parameters
    + commentId: `4` (number) - Unique id of comment reacted to.

### Remove comment reaction [DELETE]

Remove my reaction on comment with `commentId` of `4`

+ Request

    + Headers

            Authorization: Bearer f23rwfwfff...

+ Response 200



# Group Chat

## App users [/api/chat/users/search?search={search}]

+ Parameters
    + search: `dol` (string) - Search query. *(Fuzzy matching is supported)*

### Search users to chat [GET]

The search is performed on the `username` and `name` properties of the user.

+ Request 

    + Headers

            Authorization: Bearer f23rwfwfff...

+ Response 200 (application/json)

    The response data items are in the form of a partner (user) data format

    + Body

            [
                {
                    "user_id": 2,
                    "chat_id": 4,
                    "username": "dollyp",
                    "key4": "value4",
                },
                {
                    "user_id": 6,
                    "chat_id": 5,
                    "username": "dolino",
                    "key4": "value4",
                }
            ]


## New chat [/api/chat/create_chat]

### Create chat [POST]

Initating a chat requires a chat partner and the first message from the initiator.

+ **partner** (required) - The user with whom you want to engage in chat
    + **user_id** (number, required) - Partner's unique id.
    + **username** (string, required) - Partner's username.
+ **init_message** (required) - The initial message that kickstarts the chat. The format of a `message` data is quite complicated, check the `send_message` below for a detailed information.
    + **type** (required) - The type of message.
    + **text_content** - For the sake of the example request body below, `text_content` is required only if the type of `message` is `text`. Other types of `message` also have their own required fields.


+ Request (application/json)

    + Headers

            Authorization: Bearer f23rwfwfff...
    
    + Body

            {
                "partner": {
                    "user_id": 2,
                    "username": "dollyp",
                },
                "init_message": {
                    "type": "text",
                    "props": {
                        "textContent": "Hi! How're you?"
                    }
                }
            }

+ Response 200 (application/json)

    The response data consists of the newly created chat's `chat_id`, and the initial message's `init_message_id`. The full data required to render a chat snippet is sent do the partner (via WebSocket), but not to the client. The client is, therefore, expected to use optimistic UI rendering, as it has all the needed data.

    + Body

            {
                "chat_id": 4,
                "init_message_id": 2
            }
                


## Chat [/api/chat/chats/{chatId}/partner/{partnerId}/send_message]

+ Parameters
    + chatId: `1` (number) - Unique id of the target chat in which to send message.
    + partnerId: `2` (number) - Unique id of the partner user you're chatting with in this chat

### Send message [POST]

**Message content format:** Indented under each type are the properties associated with the message type

+ **type** (required) - Type: `text`
    + **textContent** (string) - For the sake of the example request body below, `text_content` is required only if the type of `message` is `text`. Other types of `message` also have their own required fields.
+ **type** (required) - Type: `voice`
    + **data** (uint8[]) - Voice data in `uint8` array binary format.
    + **duration** (number) - Duration of voice record in seconds.
+ **type** (required) - Type: `image`
    + **data** (uint8[]) - Image data in `uint8` array binary format.
    + **mimeType** (string) - The mime type of image e.g. `image/png`.
    + **caption** (string) - Image caption.
    + **size** (number) - Image size in bytes.
+ **type** (required) - Type: `audio`
    + **data** (uint8[]) - Audio data in `uint8` array binary format.
    + **mimeType** (string) - The mime type of audio e.g. `auido/mp3`.
    + **caption** (string) - Audio caption.
    + **size** (number) - Audio size in bytes.
+ **type** (required) - Type: `video`
    + **data** (uint8[]) - Video data in `uint8` array binary format.
    + **mimeType** (string) - The mime type of video e.g. `video/mp4`.
    + **caption** (string) - Video caption.
    + **size** (number) - Video size in bytes.
+ **type** (required) - Type: `file`
    + **data** (uint8[]) - File data in `uint8` array binary format.
    + **mimeType** (string) - The mime type of file e.g. `application/octet-stream`.
    + **caption** (string) - File caption.
    + **size** (number) - File size in bytes.
    + **extension** (string) - File extension e.g. `.txt`

+ Request (application/json)

    + Headers

            Authorization: Bearer f23rwfwfff...
    
    + Body

            {
                "msg_content": {
                    "type": "text",
                    "props" {
                        "textContent": "Hi! How're you?"
                    }
                }
            }

+ Response 200 (application/json)

    The response data consists of the newly created message's `new_msg_id`. The full data required to render a message card is sent do the partner (via WebSocket), but not to the client. The client is, therefore, expected to use optimistic UI rendering, as it has all the needed data.

    + Body

            {
                "new_msg_id": 2
            }
                

## Client chats [/api/chat/my_chats]

### Get my chats [GET]

+ Request 

    + Headers

            Authorization: Bearer f23rwfwfff...

+ Response 200 (application/json)

    + Body

            [
                {
                    "partner": {
                        "user_id": 2,
                        "username": "dollyp",
                        "profile_pic_url": "https://pfpic.jpg
                    },
                    "chat_id": 4,
                    "key4": "value4",
                },
                {
                    "partner": {
                        "user_id": 4,
                        "username": "samuel",
                        "profile_pic_url": "https://pfpic.jpg
                    },
                    "chat_id": 5,
                    "key4": "value4",
                }
            ]


## Chat [/api/chat/chats/{chatId}]

+ Parameters
    + chatId: `2` (number) - Unique id of chat to be deleted.

### Delete chat [DELETE]

+ Request 

    + Headers

            Authorization: Bearer f23rwfwfff...

+ Response 200




## Chat history [/api/chat/chats/{chatId}/history?limit={limit}&offset={offset}]

+ Parameters
    + chatId: `2` (number) - Unique id of chat for which to get its history.
    + limit: `20` (number) - A maximum of 20 messages per batch
    + offset: `0` (number) - `n * limit`, where `n` starts from zero, to scroll-request the next batch of data.

### Get chat history [GET]

+ Request 

    + Headers

            Authorization: Bearer f23rwfwfff...

+ Response 200 (application/json)

    + Body

            [
                {
                    "owner_user": {
                        "id": 2,
                        "username": "dollyp",
                        "profile_pic_url": "https://pfpic.jpg
                    },
                    "msg_id": 6,
                    "msg_content": {
                        "type": "text",
                        "text_content": "This is a message"
                    }
                },
                {
                    "owner_user": {
                        "id": 4,
                        "username": "samuel",
                        "profile_pic_url": "https://pfpic.jpg
                    },
                    "msg_id" 7,
                    "msg_content": {
                        "type": "text",
                        "text_content": "This is another message"
                    }
                }
            ]


## Chat message [/api/chat/chats/{chatId}/partner/{partnerId}/messages/{messageId}/delivered]

+ Parameters
    + chatId: `2` (number) - Unique id of chat.
    + partnerId: `2` (number) - Unique id of the partner user you're chatting with in this chat
    + messageId: `4` (number) - Unique id of message for which to acknowledge delivered.

### Acknowledge message delivered [PUT]

Acknowledge that a message has been delivered to the client. (i.e. the client has successfully received a message). This lets the chat partner add a double-tick on the message snippet UI. 

The request body includes the *time of delivery*.

+ Request 

    + Headers

            Authorization: Bearer f23rwfwfff...

    + Body

            {
                "delivery_time": "${dateFormat}"
            }

+ Response 204


## Chat message [/api/chat/chats/{chatId}/partner/{partnerId}/messages/{messageId}/read]

+ Parameters
    + chatId: `2` (number) - Unique id of chat.
    + partnerId: `2` (number) - Unique id of the partner user you're chatting with in this chat
    + messageId: `4` (number) - Unique id of message for which to acknowledge read.

### Acknowledge message read [PUT]

Acknowledge that a message has been read by the client. (i.e. the client has successfully received a message). This lets the chat partner light up the double-tick on the message snippet UI. 

+ Request 

    + Headers

            Authorization: Bearer f23rwfwfff...

+ Response 204


## Chat message [/api/chat/chats/{chatId}/partner/{partnerId}/messages/{messageId}/react]

+ Parameters
    + chatId: `2` (number) - Unique id of chat.
    + partnerId: `2` (number) - Unique id of the partner user you're chatting with in this chat
    + messageId: `4` (number) - Unique id of message to react to.

### React to message [POST]

+ Request 

    + Headers

            Authorization: Bearer f23rwfwfff...

    + Body

            {
                "reaction": "🥰"
            }

+ Response 201


## Chat message [/api/chat/chats/{chatId}/partner/{partnerId}/messages/{messageId}/remove_reaction]

+ Parameters
    + chatId: `2` (number) - Unique id of chat.
    + partnerId: `2` (number) - Unique id of the partner user you're chatting with in this chat
    + messageId: `4` (number) - Unique id of message to reacted to.

### Remove reaction to message [DELETE]

+ Request 

    + Headers

            Authorization: Bearer f23rwfwfff...

+ Response 200


## Chat message [/api/chat/chats/{chatId}/messages/{messageId}?delete_for={for}]

+ Parameters
    + chatId: `2` (number) - Unique id of chat.
    + messageId: `4` (number) - Unique id of message to reacted to.
    + for: `me` (string) - Specify whether the message should be deleted for you (`me`) or for both you and partner (`everyone`).

### Delete message [DELETE]

+ Request 

    + Headers

            Authorization: Bearer f23rwfwfff...

+ Response 200


